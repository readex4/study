pwd? 현재 내가 있는 위치

​

cd 디렉토리이름? 체인지 디렉토리 -> 현재 위치를 현위치 기준 어디로 옮기겠다는 명령어

ex)cd gitfth //현재 폴더 내 gitfth 라는 폴더로 위치를 옮기겠다 

​

mkdir 디렉토리이름 ? '디렉토리이름'을 만들라는 명령어 

​

git init? 현재 디렉토리에 내가 작업을 진행하겠다고 git에게 알려주는 명령어

​

git ? 입력할 수 있는, 사용할 수 있는 명령어의 리스트가 나옴

​

ls -al? 현재 디렉토리의 파일 목록을 보여주는 명령어

​

vim f1.txt? 'vim'이라는 프로그램으로 'f1.txt'라는 파일을 편집하겠다, 없으면 생성하겠다.

*편집모드에서

   i ? 텍스트 수정 (빠져나갈땐 esc)

    wq? 작성하고 종료하겠다(write, quit)

​

cat f1.txt? 'f1.txt'파일의 내용(텍스트)를 보고 싶다. 

​

git status ? 현 저장소의 상태가 어떠한지 알려달라는 명령어

​

git add 파일이름? 버전관리디렉토리 내에 있는 이 파일 관리하라는 명령어

                               (명확하게, "얘 추척해" 라고 지시하는 명령어)

ex) git add f1.txt 

*git add명령어가 있는 이유? git init한 디렉토리 내 임시적으로 작성하고 버릴 파일들도 생성할건데 그런 것들도 버전관리에 포함되면 안되기 때문.

​

버전과 변화의 차이? 버전은 의미있는 변화를 의미합니다. 예를 들어 로직을 만들고 있는데 로직을 만들다 만 상태, 예를 들어 작업하고 있는데 ㅣ친구가 부르면 중간에 나가겠죠. 이런 것들은 버전이라 할 수 없습니다. 단위의 작업이 완결된 상태가 버전입니다. 

​

지금부터 만들 버전들이 우리 자신이 만든 것이다라는 것을 다른 사람에게 알려주기 위해 이름을 세팅해야 합니다. 

git config --global user.name 닉네임 ?

git config --global user.email 이메일주소 ?

이렇게 하면 이 버전은 닉네임과 이메일주소를 포함하고 있는 버전이 되기 때문에 다른 사람이 봤을 때 아 이게 누가 작업했구나 라고 알 수 있게 됨. 이것은 딱 한번만 하면 됩니다. 

​

이렇게 하고 git commit을 하면? vim이 실행됨. 

여기에 현재 버전에 메세지를 적습니다. 메세지라 함은, 이 변화가 어떤 변화를 담고 있는지, 이 파일들이 왜 변경되었는지 그 이유를 적는 것이 버전 메세지 혹은 커밋 메세지라고 합니다. 

입력하려면? i를 눌러서 insert로 바꾸고, 1을 작성하면? 버전'1'이라는 뜻입니다. 그리고 :wq를 작성해서 빠져나옵니다. 그러면 뭐 블라블라하면서 마지막에 'create model 100644 f1.txt' 라고 뜨는데, f1.txt라는 파일이 새로운 버전이 되었다 대충 그런 메세지입니다.

그러면 최초로 버전을 생성하신 겁니다. 시작이 반이라고 이게 제일 중요한 내용입니다.

git log? 버전이 잘 만들어졌는지 확인하기 위한 명령어
